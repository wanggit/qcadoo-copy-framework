/*
 * ***************************************************************************
 * Copyright (c) 2010 Qcadoo Limited
 * Project: Qcadoo Framework
 * Version: 1.4
 *
 * This file is part of Qcadoo.
 *
 * Qcadoo is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation; either version 3 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 * ***************************************************************************
 */
var QCD = QCD || {};

QCD.Notifications = function () {
    "use strict";

    if (!(this instanceof QCD.Notifications)) {
        return new QCD.Notifications();
    }

    this.getActivityStream = function(activityStreamEnabled, activityStreamIntervalInSeconds) {
        if (activityStreamEnabled) {
            var activityStream = function () {

                $.get('/rest/activityStream', function(data) {
                    if (data instanceof Array) {
                        if (data.length > 0) {
                            $('.activityStreamContainer').html("");

                            var anyUnread = false;

                            for (var k in data) {
                                var newActivity = $("<div>", {"data-id" : data[k].id, "data-viewed" : data[k].viewed, "class" : "activityStreamMessage"});

                                newActivity.html(data[k].message);
                                newActivity.append('<p class="activityStreamDate">' + formatDate(new Date(data[k].date)) +'</p>')

                                if (data[k].type === 'productionTracking') {
                                    newActivity.addClass("productionTracking");
                                } else {
                                    newActivity.addClass("other");
                                }

                                if (!data[k].viewed) {
                                    anyUnread = true;

                                    newActivity.addClass("newMessage");
                                }

                                $('.activityStreamContainer').append(newActivity);
                            }

                            if (anyUnread) {
                                markActivityStreamAsUnread();
                            } else {
                                clearActivityStreamIcon();
                            }
                        } else {
                            $('.activityStreamContainer').html('<p class="activityStreamPlaceholder">Brak nowych aktywno≈õci.</p>');
                        }
                    }
                });

                setTimeout(activityStream, activityStreamIntervalInSeconds * 1000);

            }

            activityStream();
        }
    }

    function formatDate(date) {
       return date.getHours() + ":"
            + (date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes())
            + " " + date.getDate() + "/" + (date.getMonth() + 1) + "/" + date.getFullYear();
    }

    function markActivityStreamAsUnread() {
        if (!$('.activityStreamIcon').hasClass('activityStreamActive')) {
            $('.activityStreamIcon').addClass('activityStreamActive');
        }
    }

    function clearActivityStreamIcon() {
        if ($('.activityStreamIcon').hasClass('activityStreamActive')) {
            $('.activityStreamIcon').removeClass('activityStreamActive');
        }
    }

    this.markActivityStreamAsRead = function() {
        if ($('.activityStreamIcon').hasClass('activityStreamActive')) {
            $('.activityStreamIcon').removeClass('activityStreamActive');

            var data = $('.activityStreamMessage').map(function() {
                if (!$(this).data('viewed')) {
                    return $(this).data('id');
                }

                return null;
            }).get();

            if (data.length > 0) {
                $.ajax({
                    url: '/rest/activityStream/markAsViewed',
                    type: "POST",
                    data: JSON.stringify(data),
                    contentType: "application/json"
                 });
            }
        }
    }

	this.getNotifications = function (dbNotificationsEnabled, systemNotificationsEnabled, systemNotificationsIntervalInSeconds) {
        var audio = new Audio('/qcadooView/public/alarm.mp3');

        if (dbNotificationsEnabled) {
            var dbNotifications = function () {

                $.get('/rest/alert', function(data) {
                    if (data instanceof Array) {
                        for (var k in data) {
                            var n = noty(
                            {
                                layout: 'top',
                                theme: 'relax', // or 'relax'
                                type: data[k].type,
                                text: data[k].message,
                                dismissQueue: true, // If you want to use queue feature set this true
                                template: '<div class="noty_message"><span class="noty_text"></span><div class="noty_close"></div></div>',
                                animation: {
                                    open: 'animated fadeInDown', // Animate.css class names
                                    close: 'animated fadeOutUp', // Animate.css class names
                                    easing: 'swing', // unavailable - no need
                                    speed: 500 // unavailable - no need
                                },
                                timeout: false, // delay for closing event. Set false for sticky notifications
                                force: false, // adds notification to the beginning of queue when set to true
                                modal: false,
                                maxVisible: 3, // you can set max visible notification for dismissQueue true option,
                                killer: false, // for close all notifications before show
                                closeWith: ['button'], // ['click', 'button', 'hover', 'backdrop'] // backdrop click will close all notifications
                                buttons: false // an array of buttons
                            });

                            if (data[k].sound) {
                                $('#audio').remove();
                                $('body').append('<audio autoplay id="audio"><source src="/qcadooView/public/alarm.mp3"></audio>');
                            }
                        }
                    }
                });

                setTimeout(dbNotifications, 900000);
            }

            dbNotifications();
        }

        if (systemNotificationsEnabled) {
            var systemNotifications = function () {

                $.get('/rest/alert/systemNotifications', function(noty_data) {
                    if (noty_data.notifications instanceof Array) {
                        var data = noty_data.notifications;

                        for (var k in data) {
                            var autoClose;

                            if (data[k].autoClose) {
                                autoClose = 5000;
                            } else {
                                autoClose = false;
                            }

                            var n = noty(
                            {
                                layout: 'top',
                                theme: 'relax', // or 'relax'
                                type: data[k].type,
                                text: data[k].message,
                                dismissQueue: false, // If you want to use queue feature set this true
                                template: '<div class="noty_message"><span class="noty_text"></span><div class="noty_close"></div></div>',
                                animation: {
                                    open: 'animated fadeInDown', // Animate.css class names
                                    close: 'animated fadeOutUp', // Animate.css class names
                                    easing: 'swing', // unavailable - no need
                                    speed: 500 // unavailable - no need
                                },
                                timeout: autoClose, // delay for closing event. Set false for sticky notifications
                                force: false, // adds notification to the beginning of queue when set to true
                                modal: false,
                                maxVisible: 3, // you can set max visible notification for dismissQueue true option,
                                killer: true, // for close all notifications before show
                                closeWith: ['button'], // ['click', 'button', 'hover', 'backdrop'] // backdrop click will close all notifications
                                buttons: false // an array of buttons
                            });

                        }

                        if (noty_data.sound) {
                            $('#audio').remove();
                            $('body').append('<audio autoplay id="audio"><source src="/qcadooView/public/alarm.mp3"></audio>');
                        }
                    }
                });

                setTimeout(systemNotifications, systemNotificationsIntervalInSeconds * 1000);
            }

            systemNotifications();
        }
	};

};
