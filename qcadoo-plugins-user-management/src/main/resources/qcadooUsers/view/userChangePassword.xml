<?xml version="1.0" encoding="UTF-8"?>
<!--

    ***************************************************************************
    Copyright (c) 2010 Qcadoo Limited
    Project: Qcadoo Framework
    Version: 1.4

    This file is part of Qcadoo.

    Qcadoo is free software; you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation; either version 3 of the License,
    or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty
    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
    ***************************************************************************

-->
<view xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schema.qcadoo.org/view"
      xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd" name="userChangePassword"
      modelPlugin="qcadooSecurity" modelName="user" defaultAuthorizationRole="ROLE_ADMIN">

    <component type="window" name="window" reference="window">

        <ribbon>
            <template name="standardFormTemplate" includeItems="navigation.back"/>
            <group name="actions">
                <smallButton name="saveBack" icon="saveBackIcon16.png" state="enabled">
                    <script>
                        <![CDATA[
                            this.addOnChangeListener({
                                onClick: function() {
                                    #{form}.performEvent('changePassword', []);
                                }
                            });
			            ]]>
                    </script>
                </smallButton>
            </group>
        </ribbon>

        <component type="form" name="user" reference="form">
            <script>
                <![CDATA[
                    #{form}.addOnChangeListener({
                        onSetValue: function(value) {
                            var changed = #{changed}.getValue().content.value;
                            if (changed && changed == true) {
                                #{window}.performBackWithoutConfirm();
                            }
                        }
                    });
                ]]>
            </script>
            <component type="gridLayout" name="gridLayout" columns="2"
                       rows="2">
                <layoutElement column="1" row="1">
                    <component type="password" name="password" reference="passwordTextInput"
                               field="password"/>
                </layoutElement>
                <layoutElement column="1" row="2">
                    <component type="password" name="passwordConfirmation"
                               reference="passwordConfirmationTextInput" field="passwordConfirmation"/>
                </layoutElement>
            </component>
            <component type="input" name="viewIdentifier" reference="viewIdentifierHiddenInput"
                       field="viewIdentifier" defaultVisible="false"/>
            <component type="checkbox" name="changed" reference="changed"
                       defaultVisible="false" defaultEnabled="false"/>

            <option type="header" value="true"/>
            <option type="expression" value="#userName"/>

            <listener event="changePassword"
                      class="com.qcadoo.plugins.users.listeners.UserChangePasswordListeners"
                      method="changePassword"/>
        </component>
    </component>

    <hooks>
        <beforeRender class="com.qcadoo.plugins.users.internal.UserService"
                      method="setPasswordAsRequired"/>

        <beforeRender class="com.qcadoo.plugins.users.internal.UserService"
                      method="disableFormForSuperadmin"/>
    </hooks>

</view>